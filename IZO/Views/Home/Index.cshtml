@using IZO.Models.Expenses
@using IZO.Models.Charts
@using IZO.Services
@model IZO.Models.ViewModels.ExpensesViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body>
    <div class="layout">
        <div class="fixed-expenses-table">
            <h2>Monthly expenses</h2>
            <table>
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Category</th>
                        <th>Amount Spent</th>
                        <th>
                            <button class="btn-add-exp" onclick="openExpenseModal('FIXED')">
                                <i class="fa fa-plus-square"></i>
                            </button>
                    
                        </th> 
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in ExpenseAccesorService.monthlyExpenses.fixedExpenses)
                    {
                        @foreach(var expense in category.Value)
                        {
                            <tr>
                                <td>@expense.Date.ToShortDateString()</td>
                                <td>@category.Key.ToString()</td>
                                <td>@expense.moneySpent.ToString("C")</td>
                                <td>
                                    <button class="btn-del-exp" onclick="deleteExpense('@expense.Date', '@expense.category', '@expense.moneySpent', 'FIXED')">
                                        <i class="fa fa-trash-o"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="d2d-expenses-table">
            <h2>Day-2-day expenses</h2>
            <table>
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Category</th>
                        <th>Amount Spent</th>
                        <th>
                            <button class="btn-add-exp" onclick="openExpenseModal('D2D')">
                                <i class="fa fa-plus-square"></i>
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in ExpenseAccesorService.monthlyExpenses.dayToDayExpenses)
                    {
                        @foreach (var expense in category.Value)
                        {
                            <tr>
                                <td>@expense.Date.ToShortDateString()</td>
                                <td>@category.Key.ToString()</td>
                                <td>@expense.moneySpent.ToString("C")</td>
                                <td>
                                    <button class="btn-del-exp" onclick="deleteExpense('@expense.Date', '@expense.category', '@expense.moneySpent', 'D2D')">
                                        <i class="fa fa-trash-o"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="fixed1-earning-table">
            <h2>Income</h2>
            <table>
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Category</th>
                        <th>Amount Spent</th>
                        <th>
                            <button class="btn-add-ear" onclick="openExpenseModal('EARNING')">
                                <i class="fa fa-plus-square"></i>
                            </button>

                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in ExpenseAccesorService.monthlyExpenses.earnings)
                    {
                        @foreach (var earning in category.Value)
                        {
                            <tr>
                                <td>@earning.Date.ToShortDateString()</td>
                                <td>@category.Key.ToString()</td>
                                <td>@earning.moneySpent.ToString("C")</td>
                                <td>
                                    <button class="btn-del-exp" onclick="deleteExpense('@earning.Date', '@earning.category', '@earning.moneySpent', 'EARNING')">
                                        <i class="fa fa-trash-o"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="expenses-chart">
            <h2>Expenses Chart</h2>
            <canvas id="expensesChart"></canvas>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var pieChartData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ExpensePieChart.ExpensesByCategory.Select(x => new { Category = x.Key.ToString(), Total = x.Value })));

                function createPieChart(data) {
                    const ctx = document.getElementById('expensesChart').getContext('2d');
                    const labels = data.map(d => d.Category);
                    const amounts = data.map(d => d.Total);

                    const pieChart = new Chart(ctx, {
                        type: 'doughnut',
                        data: {
                            label: 'Expenses by Category',
                            labels: labels,
                            datasets: [{
                                data: amounts,
                                backgroundColor: [
                                    '#2c699a',
                                    '#048ba8',
                                    '#00a09f',
                                    '#4ab184',
                                    '#92bc66',
                                    '#dabe58',
                                    '#f7b267',
                                    '#f79d65',
                                    '#f4845f'
                                ],
                                hoverOffset: 4,
                                cutout: '75%',
                                borderWidth: 0
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'right', // Positions the legend to the right
                                    labels: {
                                        boxWidth: 10, // Adjusts the size of the color box
                                        padding: 30 // Adjusts the padding between legend items
                                    }
                                }
                            }
                        }
                    });
                }

                createPieChart(pieChartData);
            });


        </script>


        <div class="expenses-graph">
            <h2>Financial Overview</h2>
            <canvas id="expensesGraph"></canvas> <!-- Canvas for another graph representation -->
        </div>
        <div class="saving-calculator">
            <div class="saving-calculator">
                <h2>Saving Calculator</h2>
                <form id="savingCalculatorForm">
                    <div>
                        <label for="plannedAmount">Planned Amount</label><br/>
                        <input type="number" id="plannedAmount" name="plannedAmount" pattern="\d+(\.\d{1,2})?" title="Please enter a valid amount (e.g., 100 or 100.50)" required>
                    </div>
                    <div>
                        <button type="button" class="btn-calculate-savings" onclick="executeGeneratePlan()">Calculate Savings</button>
                    </div>
                </form>
                <p id="calculatedTime">0 Month/s</p> <!-- Placeholder for calculated savings -->
            </div>

        </div>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <script>
            var pieChartData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ExpensePieChart.ExpensesByCategory.Select(x => new {Total = x.Value }))); // TU CHCIAŁEM PODOBNIE JAK WE WCZESNIEJSZYM WYKRESIE ZGARNAC TE DANE 

            document.addEventListener('DOMContentLoaded', function () {
                // Sample data: Earnings are positive, and expenses are negative
                var labels = "@ViewBag.availableMonths";
                labels = labels.replaceAll("&quot;", '"')
                labels = JSON.parse(labels)
                var expenses = "@ViewBag.expensesPerMonth";
                expenses = JSON.parse(expenses)
                var earnings = "@ViewBag.earningsPerMonth";
                earnings = JSON.parse(earnings)


                var financialData = { // -------------------------------------------------------------TUTAJ SA DANE DLA 5 MIESIECY 
                    labels: labels, // Example months
                    
                    datasets: [
                        {
                            label: 'Earnings',
                            data: earnings, // ----------------SAMPLE DATA
                            backgroundColor: 'rgba(54, 162, 235, 0.6)', // Blue
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1,
                            stack: 'stack0',
                            barThickness: 15
                        },
                        {
                            label: 'Expenses',
                            data: expenses, // ---------------SAMPLE DATA
                            backgroundColor: 'rgba(255, 99, 132, 0.6)', // Red
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1,
                            stack: 'stack0',
                            barThickness: 15
                        }
                    ]
                };
                
                function createFinancialChart(data) {
                    const ctx = document.getElementById('expensesGraph').getContext('2d');

                    const financialChart = new Chart(ctx, {
                        type: 'bar',
                        data: data,
                        options: {
                            scales: {
                                x: {
                                    stacked: true,
                                    barPercentage: 0.25,  // Reduces bar width to 25% of its category slot
                                    categoryPercentage: 0.6  // Adjusts the percentage of the category width used by bars
                                },
                                y: {
                                    stacked: true,
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function (value, index, values) {
                                            return Math.abs(value); // Ensures the scale shows positive numbers only
                                        }
                                    }
                                }
                            },
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'top'
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function (tooltipItem) {
                                            return tooltipItem.dataset.label + ': ' + Math.abs(tooltipItem.raw);
                                        }
                                    }
                                }
                            }
                        }
                    });
                }

                createFinancialChart(financialData);
            });
        </script>

        <!-- Modal for Adding Expense -->
        <div id="addExpenseModal" class="modal" style="display:none;">
            <div class="modal-content">
                <span class="close">&times;</span>
                <h2 style="margin-bottom: 20px">Add new expense</h2>
                <form id="addExpenseForm">
                    <input id="expenseCategoryField" type="text" value="" hidden />
                    <div>
                        <label for="date" style="margin-bottom: 10px">Date:</label>
                        <input type="date" id="date" name="date" required>
                    </div>
                    <div>
                        <label for="category" style="margin-bottom: 10px">Category:</label>
                        <select id="category" name="category">
                            @foreach (ExpenseCategory category in Enum.GetValues(typeof(ExpenseCategory)))
                            {
                                <option value="@category.ToString()">@category</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label for="value" style="margin-bottom: 10px">Amount:</label>
                        <input type="number" id="value" name="value" step="1" required>
                    </div>
                    <button type="button" class="btn-submit" onclick="submitExpense()">Submit</button>
                </form>
            </div>
        </div>
</body>
</html>

<script>
    // Get the modal
    var modalExpense = document.getElementById("addExpenseModal");
    var closeButton = document.getElementsByClassName("close")[0];

    // Function to open modal
    function openExpenseModal(type) {
        modalExpense.style.display = "block";
        var typeField = document.getElementById("expenseCategoryField")
        typeField.value = type
        // Set the date input to today's date
        setTodaysDate();
    }


    closeButton.onclick = function () {
        modalExpense.style.display = "none";
    }

    // Function to submit the expense form
    function submitExpense() {
        var date = document.getElementById('date').value;window.onclick = function (event) {
        if (event.target == modalExpense) {
            modalExpense.style.display = "none";
        }
    }
        var category = document.getElementById('category').value;
        var value = document.getElementById('value').value;
        var type = document.getElementById('expenseCategoryField').value;

        // AJAX request
        $.ajax({
            url: '@Url.Action("AddExpense", "Expense")', // Controller/Action path
            type: 'POST',
            data: { type: type, date: date, category: category, value: value },
            success: function (response) {
                // Close the modal
                modalExpense.style.display = "none";
                window.location.reload();
            },
            error: function () {
                alert('Error adding expense');
            }
        });
    }


    function executeGeneratePlan() {
        var plannedAmount = $('#plannedAmount').val(); // Get planned amount from input field
        $.ajax({
            url: '/Expense/GeneratePlan', // Endpoint URL
            type: 'GET', // HTTP method
            dataType: 'json', // Expected data type
            data: { value: plannedAmount }, // Data to send
            success: function (response) { // Success callback function
                if (response.success) {
                    // Update calculated savings in the <p> element
                    console.log(response.planedSaving);
                    $('#calculatedTime').text(response.planedSaving + " Month/s");
                } else {
                    console.error("Failed to generate plan: " + response.message);
                    // Handle failure
                    // You can add further handling here, such as displaying an error message
                }
            },
            error: function (xhr, status, error) { // Error callback function
                console.error("Error occurred while generating plan: " + error);
                // Handle error
                // You can add further handling here, such as displaying an error message
            }
        });
    }

    // Function to set the date input to today's date
    function setTodaysDate() {
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;
        document.getElementById('date').value = today;
    }

    // Optionally, set the date when the page loads
    document.addEventListener("DOMContentLoaded", function () {
        setTodaysDate();
    });

    function deleteExpense(date, category, value, type) {
        $.ajax({
            url: '@Url.Action("DeleteExpense", "Expense")', // Controller/Action path
            type: 'POST',
            data: { type: type, date: date, category: category, value: value },
            success: function (response) {
                window.location.reload();
            },
            error: function () {
                alert('Error deleting expense');
            }
        });
    }
</script>


